* Lispeln
1. Zischlaute fehlerhaft aussprechen, mit der Zunge anstoÃŸen.
2. A rusty Scheme interpreter.
** Why
Lispeln is a personal project to write a interpreter for lisp, while learning [[https://savannah.gnu.org/projects/emacs/][GNU Emacs]] which is essentially an interpreter environment for Emacs Lisp. I find this reflection to be particularly satisfying, hence why I chose this project to get started in the emacs environment.

** How
Rust is my current go-to language for large-scale projects like this. I'll be referring to various sources for information on how to proceed, as well as learning Scheme along the way. I'll list anything I use in this manner below, under References.

*** References
- https://bernsteinbear.com/blog/compiling-a-lisp-0/
- https://bernsteinbear.com/blog/lisp/08_asts/
- https://www.scheme.com/tspl2d/grammar.html
- a more up to date source, https://www.scheme.com/tspl4/grammar.html#./grammar
- https://www.gnu.org/software/guile/manual/r5rs/Formal-syntax.html  
** Examples
The grammar is written out in BNF notation in the `grammar.bnf` file, but I find it easier to have simple examples to help follow along:
*** Expressions
The most simple expression is a ~constant~:
#+begin_src emacs-lisp
  486
#+end_src
The tokens for this expression would look like this:
#+begin_src
Numeric(486)
#+end_src
And the AST would look like this:
#+begin_src
program
 ->form
  ->expression
   ->constant
    ->number
     ->number 10
      ->prefix 10
       ->empty
      ->complex 10
       ->real 10
        ->sign
         ->empty
        ->ureal 10
         ->uinteger 10
          ->digit 10
           4
          ->number
           8
          ->number
           6
#+end_src
As you can see, a little bit more complex when we take into account the grammar of the expression!
